diff -u -r openssh-6.9p1.orig/ssh-add.c openssh-6.9p1/ssh-add.c
--- openssh-6.9p1.orig/ssh-add.c	2015-08-06 10:53:45.000000000 -0700
+++ openssh-6.9p1/ssh-add.c	2015-08-06 11:01:42.000000000 -0700
@@ -336,12 +336,12 @@
 }
 
 static int
-update_card(int agent_fd, int add, const char *id)
+update_card(int agent_fd, int add, const char *id, int no_pin)
 {
 	char *pin = NULL;
 	int r, ret = -1;
 
-	if (add) {
+	if (add && !no_pin) {
 		if ((pin = read_passphrase("Enter passphrase for PKCS#11: ",
 		    RP_ALLOW_STDIN)) == NULL)
 			return -1;
@@ -473,6 +473,7 @@
 	fprintf(stderr, "  -x          Lock agent.\n");
 	fprintf(stderr, "  -X          Unlock agent.\n");
 	fprintf(stderr, "  -s pkcs11   Add keys from PKCS#11 provider.\n");
+	fprintf(stderr, "  -n          Don't ask for PKCS#11 PIN.\n");
 	fprintf(stderr, "  -e pkcs11   Remove keys provided by PKCS#11 provider.\n");
 }
 
@@ -485,6 +486,7 @@
 	char *pkcs11provider = NULL;
 	int r, i, ch, deleting = 0, ret = 0, key_only = 0;
 	int xflag = 0, lflag = 0, Dflag = 0;
+	int no_pin = 0;
 
 	/* Ensure that fds 0, 1 and 2 are open or directed to /dev/null */
 	sanitise_stdfd();
@@ -511,7 +513,7 @@
 		exit(2);
 	}
 
-	while ((ch = getopt(argc, argv, "klLcdDxXE:e:s:t:")) != -1) {
+	while ((ch = getopt(argc, argv, "klLcdDxXnE:e:s:t:")) != -1) {
 		switch (ch) {
 		case 'E':
 			fingerprint_hash = ssh_digest_alg_by_name(optarg);
@@ -545,6 +547,9 @@
 		case 's':
 			pkcs11provider = optarg;
 			break;
+		case 'n':
+			no_pin = 1;
+			break;
 		case 'e':
 			deleting = 1;
 			pkcs11provider = optarg;
@@ -582,7 +587,7 @@
 	argc -= optind;
 	argv += optind;
 	if (pkcs11provider != NULL) {
-		if (update_card(agent_fd, !deleting, pkcs11provider) == -1)
+		if (update_card(agent_fd, !deleting, pkcs11provider, no_pin) == -1)
 			ret = 1;
 		goto done;
 	}
diff -u -r openssh-6.9p1.orig/ssh-pkcs11.c openssh-6.9p1/ssh-pkcs11.c
--- openssh-6.9p1.orig/ssh-pkcs11.c	2015-08-06 10:53:45.000000000 -0700
+++ openssh-6.9p1/ssh-pkcs11.c	2015-08-06 11:01:42.000000000 -0700
@@ -253,7 +253,15 @@
 	}
 	f = k11->provider->function_list;
 	si = &k11->provider->slotinfo[k11->slotidx];
-	if ((si->token.flags & CKF_LOGIN_REQUIRED) && !si->logged_in) {
+	if ((si->token.flags & CKF_LOGIN_REQUIRED) && !si->logged_in &&
+		(si->token.flags & CKF_PROTECTED_AUTHENTICATION_PATH)) {
+		if ((rv = f->C_Login(si->session, CKU_USER, NULL, 0)) == CKR_OK) {
+			si->logged_in = 1;
+		} else {
+			error("C_Login with protected authentication path failed: %lu", rv);
+		}
+	}
+    if ((si->token.flags & CKF_LOGIN_REQUIRED) && !si->logged_in) {
 		if (!pkcs11_interactive) {
 			error("need pin entry%s", (si->token.flags &
 			    CKF_PROTECTED_AUTHENTICATION_PATH) ?
@@ -361,10 +369,12 @@
 	CK_FUNCTION_LIST	*f;
 	CK_SESSION_HANDLE	session;
 	int			login_required;
+	int			pap;
 
 	f = p->function_list;
 	login_required = p->slotinfo[slotidx].token.flags & CKF_LOGIN_REQUIRED;
-	if (pin && login_required && !strlen(pin)) {
+	pap = p->slotinfo[slotidx].token.flags & CKF_PROTECTED_AUTHENTICATION_PATH;
+	if (pin && login_required && !strlen(pin) && !pap) {
 		error("pin required");
 		return (-1);
 	}
@@ -374,7 +384,14 @@
 		error("C_OpenSession failed: %lu", rv);
 		return (-1);
 	}
-	if (login_required && pin) {
+	if (login_required && pap) {
+		if ((rv = f->C_Login(session, CKU_USER, NULL, 0)) == CKR_OK) {
+			p->slotinfo[slotidx].logged_in = 1;
+		} else {
+			error("C_Login with protected authentication path failed: %lu", rv);
+		}
+	}
+	if (login_required && pin && !p->slotinfo[slotidx].logged_in) {
 		rv = f->C_Login(session, CKU_USER,
 		    (u_char *)pin, strlen(pin));
 		if (rv != CKR_OK && rv != CKR_USER_ALREADY_LOGGED_IN) {
